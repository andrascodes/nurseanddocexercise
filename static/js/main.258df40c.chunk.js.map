{"version":3,"sources":["serviceWorker.js","lib/utils/parseResponseAsJson.js","lib/OpenWeatherMapAPI/index.js","lib/TimezoneDBAPI/index.js","lib/index.js","components/ErrorComponent/index.js","components/Loading/index.js","lib/utils/addLeadingZeros.js","components/CityCard/index.js","views/ListView/index.js","views/SearchView/index.js","components/WeatherCard/index.js","views/WeatherView/index.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","parseResponseAsJSON","response","ok","Promise","reject","error","statusCode","status","statusText","json","handleError","cod","Error","message","getIcon","weatherId","createResult","day","night","getWindDescription","speed","createOpenWeatherMapAPI","_ref","fetch","BASE_URL","findCityByName","cityname","concat","process","then","data","list","cities","map","city","id","name","countryCode","sys","country","flag","coord","temperature","max","Math","floor","main","temp_max","min","temp_min","current","temp","humidity","wind","description","weather","_ref2","icon","getCurrentWeatherByCityId","cityId","_ref3","fetch_retry","url","options","retryNumber","catch","n","resolve","setTimeout","timezoneDBAPI","getTimezoneByLocation","lat","lon","parseResponseAsJson","localTime","hours","date","Date","formatted","getHours","minutes","getMinutes","color","createTimezoneDBAPI","openWeatherMapAPI","ErrorComponent","react_default","a","createElement","Loading","addLeadingZeros","number","Card","styled","Link","_templateObject","CityName","div","_templateObject2","Weather","_templateObject3","Icon","_templateObject4","Temperature","_templateObject5","CityCard","state","undefined","timeOfDay","renderError","components_ErrorComponent","renderLoading","components_Loading","_this2","this","props","setState","to","react_fontawesome_index_es","Component","View","ListView_templateObject","ListView","queryString","parse","search","_this3","components_CityCard","key","length","SearchView_templateObject","Container","SearchView_templateObject2","Title","SearchView_templateObject3","Button","button","SearchView_templateObject4","Input","input","SearchView_templateObject5","SearchView","searchQuery","handleSearchFieldChange","event","_this","target","value","handleSearchFormSubmit","preventDefault","history","push","pathname","SearchView_View","action","onSubmit","required","type","onChange","WeatherCard_templateObject","TopContainer","WeatherCard_templateObject2","Time","WeatherCard_templateObject3","WeatherCard_templateObject4","WeatherCard_templateObject5","_templateObject6","EdgeValue","_templateObject7","Current","_templateObject8","_templateObject9","Description","_templateObject10","WeatherCard","WeatherCard_Card","WeatherCard_CityName","WeatherCard_Temperature","WeatherCard_Container","WeatherCard_Icon","WeatherView","params","Object","objectSpread","_this$state","components_WeatherCard","library","add","faBolt","faCloud","faCloudMoon","faCloudMoonRain","faCloudRain","faCloudShowersHeavy","faCloudSun","faCloudSunRain","faIcicles","faMoon","faSnowflake","faSun","faWater","faWind","faTint","GlobalStyles","createGlobalStyle","App_templateObject","App","react","BrowserRouter","basename","Route","exact","path","component","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.258df40c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const parseResponseAsJSON = response => {\n  if (response.ok !== true) {\n    return Promise.reject({\n      error: true,\n      statusCode: response.status,\n      statusText: response.statusText\n    });\n  }\n\n  return response.json();\n};\n\nexport default parseResponseAsJSON;\n","import { flag } from \"country-code-emoji\";\nimport parseResponseAsJSON from \"../utils/parseResponseAsJson\";\n\nconst handleError = response => {\n  if (response.cod !== \"200\" && response.cod !== 200) {\n    return Promise.reject(\n      new Error({\n        error: true,\n        message: response.message,\n        response\n      })\n    );\n  }\n\n  return response;\n};\n\nconst getIcon = weatherId => {\n  const createResult = (day, night) => ({\n    day,\n    night: night || day\n  });\n\n  if (200 <= weatherId && weatherId <= 232) {\n    return createResult(\"bolt\");\n  } else if (300 <= weatherId && weatherId <= 321) {\n    return createResult(\"cloud-rain\");\n  } else if (500 <= weatherId && weatherId <= 504) {\n    return createResult(\"cloud-sun-rain\", \"cloud-moon-rain\");\n  } else if (weatherId === 511) {\n    return createResult(\"icicles\");\n  } else if (520 <= weatherId && weatherId <= 531) {\n    return createResult(\"cloud-showers-heavy\");\n  } else if (600 <= weatherId && weatherId <= 622) {\n    return createResult(\"snowflake\");\n  } else if (701 <= weatherId && weatherId <= 781) {\n    return createResult(\"water\");\n  } else if (weatherId === 800) {\n    return createResult(\"sun\", \"moon\");\n  } else if (weatherId === 801) {\n    return createResult(\"cloud-sun\", \"cloud-moon\");\n  } else if (weatherId === 802) {\n    return createResult(\"cloud\");\n  } else if (weatherId === 803 || weatherId === 804) {\n    return createResult(\"cloud\");\n  }\n};\n\nconst getWindDescription = speed => {\n  // https://en.wikipedia.org/wiki/Beaufort_scale\n  if (speed < 0.5) {\n    return \"Calm\";\n  } else if (0.5 <= speed && speed < 1.6) {\n    return \"Light air\";\n  } else if (1.6 <= speed && speed < 3.4) {\n    return \"Light breeze\";\n  } else if (3.4 <= speed && speed < 5.6) {\n    return \"Gentle breeze\";\n  } else if (5.6 <= speed && speed < 8) {\n    return \"Moderate breeze\";\n  } else if (8 <= speed && speed < 10.8) {\n    return \"Fresh breeze\";\n  } else if (10.8 <= speed && speed < 13.9) {\n    return \"Strong breeze\";\n  } else if (13.9 <= speed && speed < 17.2) {\n    return \"High winds\";\n  } else if (17.2 <= speed && speed < 20.8) {\n    return \"Gale\";\n  } else if (20.8 <= speed && speed < 24.5) {\n    return \"Strong gale\";\n  } else if (24.5 <= speed && speed < 28.5) {\n    return \"Storm\";\n  } else if (28.5 <= speed && speed < 32.6) {\n    return \"Violent storm\";\n  } else {\n    return \"Hurricane force\";\n  }\n};\n\nconst createOpenWeatherMapAPI = ({ fetch }) => {\n  const BASE_URL = \"https://api.openweathermap.org/data/2.5/\";\n\n  const findCityByName = cityname =>\n    fetch(\n      `${BASE_URL}find?q=${cityname}&units=metric&appid=${\n        process.env.REACT_APP_OWM_KEY\n      }`\n    )\n      .then(parseResponseAsJSON)\n      .then(handleError)\n      .then(data => data.list)\n      .then(cities =>\n        cities.map(city => ({\n          id: city.id,\n          name: city.name,\n          countryCode: city.sys.country,\n          flag: flag(city.sys.country),\n          coord: city.coord,\n          temperature: {\n            max: Math.floor(city.main.temp_max),\n            min: Math.floor(city.main.temp_min),\n            current: Math.floor(city.main.temp)\n          },\n          humidity: city.main.humidity,\n          wind: {\n            speed: city.wind.speed,\n            description: getWindDescription(city.wind.speed)\n          },\n          weather: city.weather.map(({ id, description }) => ({\n            id,\n            icon: getIcon(id),\n            description\n          }))\n        }))\n      );\n\n  const getCurrentWeatherByCityId = cityId =>\n    fetch(\n      `${BASE_URL}weather?id=${cityId}&units=metric&appid=${\n        process.env.REACT_APP_OWM_KEY\n      }`\n    )\n      .then(parseResponseAsJSON)\n      .then(handleError)\n      .then(city => ({\n        id: city.id,\n        name: city.name,\n        countryCode: city.sys.country,\n        flag: flag(city.sys.country),\n        coord: city.coord,\n        temperature: {\n          max: Math.floor(city.main.temp_max),\n          min: Math.floor(city.main.temp_min),\n          current: Math.floor(city.main.temp)\n        },\n        humidity: city.main.humidity,\n        wind: {\n          speed: city.wind.speed,\n          description: getWindDescription(city.wind.speed)\n        },\n        weather: city.weather.map(({ id, description }) => ({\n          id,\n          icon: getIcon(id),\n          description\n        }))\n      }));\n\n  return {\n    findCityByName,\n    getCurrentWeatherByCityId\n  };\n};\n\nexport default createOpenWeatherMapAPI;\n","import parseResponseAsJson from \"../utils/parseResponseAsJson\";\n\nconst getTimeOfDay = hours => {\n  if (hours < 7) {\n    return \"night\";\n  } else if (hours < 12) {\n    return \"morning\";\n  } else if (hours < 18) {\n    return \"day\";\n  } else if (hours < 21) {\n    return \"evening\";\n  } else {\n    return \"night\";\n  }\n};\n\nconst wait = n => new Promise(resolve => setTimeout(resolve, n));\n\nconst fetch_retry = (url, options, retryNumber) =>\n  fetch(url, options).catch(error => {\n    if (retryNumber < 0) {\n      throw error;\n    }\n    return wait(1200).then(() => fetch_retry(url, options, retryNumber - 1));\n  });\n\nconst createTimezoneDBAPI = ({ fetch }) => {\n  const getTimezoneByLocation = ({ lat, lon }, retryNumber) =>\n    fetch_retry(\n      `https://api.timezonedb.com/v2.1/get-time-zone?key=${\n        process.env.REACT_APP_TZDB_KEY\n      }&format=json&by=position&lat=${lat}&lng=${lon}`,\n      {},\n      retryNumber\n    )\n      .then(parseResponseAsJson)\n      .then(data => {\n        if (data.status !== \"OK\") {\n          return Promise.reject(\n            new Error({\n              error: true,\n              message: data.message,\n              data\n            })\n          );\n        }\n\n        return data;\n      })\n      .then(localTime => {\n        const date = new Date(localTime.formatted);\n        return {\n          hours: date.getHours(),\n          minutes: date.getMinutes(),\n          color: getTimeOfDay(date.getHours())\n        };\n      })\n      .catch(error => {\n        if (retryNumber < 0) {\n          return Promise.reject(error);\n        }\n        return setTimeout(\n          getTimezoneByLocation({ lat, lon }, retryNumber - 1),\n          1000\n        );\n      });\n  return {\n    getTimezoneByLocation\n  };\n};\n\nexport default createTimezoneDBAPI;\n","import createOpenWeatherMapAPI from \"./OpenWeatherMapAPI\";\nimport createTimezoneDBAPI from \"./TimezoneDBAPI\";\n\nconst timezoneDBAPI = createTimezoneDBAPI({ fetch: window.fetch });\nconst openWeatherMapAPI = createOpenWeatherMapAPI({ fetch: window.fetch });\n\nexport { timezoneDBAPI, openWeatherMapAPI };\n","import React from \"react\";\n\nconst ErrorComponent = () => {\n  return <div>Something went wrong!</div>;\n};\n\nexport default ErrorComponent;\n","import React from \"react\";\n\nconst Loading = () => {\n  return <div>Loading...</div>;\n};\n\nexport default Loading;\n","const addLeadingZeros = number => {\n  if (number < 10) {\n    return `0${number}`;\n  }\n  return `${number}`;\n};\n\nexport default addLeadingZeros;\n","import React, { Component } from \"react\";\n\nimport ErrorComponent from \"../ErrorComponent\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { Link } from \"react-router-dom\";\nimport Loading from \"../Loading\";\nimport addLeadingZeros from \"../../lib/utils/addLeadingZeros\";\nimport styled from \"styled-components\";\n\nconst Card = styled(Link)`\n  color: unset;\n  text-decoration: unset;\n  display: flex;\n  align-items: center;\n  border: 1px solid black;\n  border-radius: 8px;\n  margin-bottom: 4px;\n  height: 65px;\n  padding-left: 15px;\n  padding-right: 12px;\n`;\n\nconst CityName = styled.div`\n  flex-grow: 1;\n  font-size: 20px;\n  display: flex;\n  align-items: center;\n  & div {\n    margin-top: 4px;\n    margin-left: 8px;\n    font-size: 25px;\n  }\n`;\n\nconst Weather = styled.div`\n  display: flex;\n  font-size: 40px;\n`;\n\nconst Icon = styled.div`\n  margin-right: 20px;\n`;\n\nconst Temperature = styled.div``;\n\nclass CityCard extends Component {\n  state = {\n    localTime: undefined,\n    timeOfDay: \"\",\n    error: false\n  };\n\n  componentDidMount() {\n    this.props\n      .getTimezoneByLocation()\n      .then(localTime =>\n        this.setState({\n          localTime: `${addLeadingZeros(localTime.hours)}:${addLeadingZeros(\n            localTime.minutes\n          )}`,\n          timeOfDay: localTime.timeOfDay\n        })\n      )\n      .catch(error => this.setState({ error }));\n  }\n\n  renderError = () => <ErrorComponent />;\n  renderLoading = () => <Loading />;\n\n  render() {\n    if (this.state.error !== false) {\n      return this.renderError();\n    }\n\n    if (this.state.localTime === undefined) {\n      return this.renderLoading();\n    }\n\n    return (\n      <Card to={`/weather/${this.props.id}`}>\n        <CityName>\n          {this.props.name}\n          <div>{this.props.flag}</div>\n        </CityName>\n        <Weather>\n          <Icon>\n            {this.state.timeOfDay === \"night\" ? (\n              <FontAwesomeIcon icon={this.props.weather[0].icon.night} />\n            ) : (\n              <FontAwesomeIcon icon={this.props.weather[0].icon.day} />\n            )}\n          </Icon>\n          <Temperature>{this.props.temperature}&#176;</Temperature>\n        </Weather>\n      </Card>\n    );\n  }\n}\n\nexport default CityCard;\n","import React, { Component } from \"react\";\nimport { openWeatherMapAPI, timezoneDBAPI } from \"../../lib\";\n\nimport CityCard from \"../../components/CityCard\";\nimport ErrorComponent from \"../../components/ErrorComponent\";\nimport Loading from \"../../components/Loading\";\nimport queryString from \"query-string\";\nimport styled from \"styled-components\";\n\nconst View = styled.div`\n  align-self: flex-start;\n  width: calc(100% - 10px);\n  margin-top: 5px;\n`;\n\nclass ListView extends Component {\n  state = {\n    cities: undefined,\n    error: false\n  };\n\n  componentDidMount() {\n    const { city } = queryString.parse(this.props.location.search);\n    openWeatherMapAPI\n      .findCityByName(city)\n      .then(cities => this.setState({ cities }))\n      .catch(error => this.setState({ error }));\n  }\n\n  renderLoading = () => <Loading />;\n\n  renderError = () => <ErrorComponent />;\n\n  render() {\n    if (this.state.error !== false) {\n      return this.renderError();\n    }\n\n    if (this.state.cities === undefined) {\n      return this.renderLoading();\n    }\n\n    return (\n      <View>\n        {this.state.cities.map(city => (\n          <CityCard\n            key={`${city.id}-card`}\n            id={city.id}\n            getTimezoneByLocation={() =>\n              timezoneDBAPI.getTimezoneByLocation(\n                city.coord,\n                this.state.cities.length\n              )\n            }\n            name={city.name}\n            flag={city.flag}\n            temperature={city.temperature.current}\n            weather={city.weather}\n          />\n        ))}\n      </View>\n    );\n  }\n}\n\nexport default ListView;\n","import React, { Component } from \"react\";\n\nimport styled from \"styled-components\";\n\nconst View = styled.div`\n  height: 100%;\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n`;\n\nconst Title = styled.div`\n  text-align: center;\n  font-size: 25px;\n  width: 60%;\n`;\n\nconst Button = styled.button`\n  font-size: 15px;\n  border: 1px solid black;\n  border-radius: 10px;\n  padding: 10px;\n  background-color: transparent;\n  color: black;\n`;\n\nconst Input = styled.input`\n  text-align: center;\n  font-size: 20px;\n  margin-top: 20px;\n  margin-bottom: 30px;\n  border: none;\n  border-bottom: 1px solid black;\n  font-weight: bold;\n  width: 60%;\n\n  &:focus {\n    outline: none;\n  }\n`;\n\nclass SearchView extends Component {\n  state = {\n    searchQuery: \"\"\n  };\n\n  handleSearchFieldChange = event =>\n    this.setState({ searchQuery: event.target.value });\n\n  handleSearchFormSubmit = event => {\n    event.preventDefault();\n    this.props.history.push({\n      pathname: \"/search\",\n      search: `?city=${this.state.searchQuery}`\n    });\n  };\n\n  render() {\n    return (\n      <View>\n        <Container>\n          <Title>What's the weather like in...</Title>\n          <form action=\"submit\" onSubmit={this.handleSearchFormSubmit}>\n            <Container>\n              <Input\n                required=\"required\"\n                type=\"text\"\n                onChange={this.handleSearchFieldChange}\n              />\n              <Button type=\"submit\">Let's See!</Button>\n            </Container>\n          </form>\n        </Container>\n      </View>\n    );\n  }\n}\n\nexport default SearchView;\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React from \"react\";\nimport styled from \"styled-components\";\n\nconst Card = styled.div`\n  width: calc(100% - 10px);\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  height: calc(100% - 10px);\n  border: 1px solid black;\n  border-radius: 8px;\n`;\n\nconst TopContainer = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n  flex: 1 1;\n  width: 100%;\n`;\n\nconst Time = styled.div`\n  margin-bottom: 20px;\n`;\n\nconst CityName = styled.div`\n  font-size: 35px;\n  text-align: center;\n`;\n\nconst Temperature = styled.div`\n  display: flex;\n  justify-content: space-between;\n  width: 100%;\n  margin-top: 75px;\n  margin-bottom: 20px;\n`;\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  width: 100%;\n  margin: 20px 0;\n`;\n\nconst EdgeValue = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: flex-end;\n\n  &:first-child {\n    margin-left: 20px;\n  }\n\n  &:last-child {\n    margin-right: 20px;\n  }\n`;\nconst Current = styled.div`\n  font-size: 65px;\n  line-height: 0.8;\n`;\n\nconst Icon = styled.div`\n  margin-left: 20px;\n  font-size: 40px;\n`;\n\nconst Description = styled.div`\n  margin-right: 20px;\n`;\n\nconst WeatherCard = ({\n  name,\n  flag,\n  temperature,\n  wind,\n  weather,\n  humidity,\n  localTime,\n  timeOfDay\n}) => {\n  return (\n    <Card>\n      <TopContainer>\n        <Time>{localTime}</Time>\n        <CityName>\n          <div>\n            {name}, {flag}\n          </div>\n        </CityName>\n        <Temperature>\n          <EdgeValue>\n            <div>Min</div>\n            {temperature.min}&#176;\n          </EdgeValue>\n          <Current>{temperature.current}&#176;</Current>\n          <EdgeValue>\n            <div>Max</div>\n            {temperature.max}&#176;\n          </EdgeValue>\n        </Temperature>\n      </TopContainer>\n      <Container>\n        <Icon>\n          {timeOfDay === \"night\" ? (\n            <FontAwesomeIcon icon={weather[0].icon.night} />\n          ) : (\n            <FontAwesomeIcon icon={weather[0].icon.day} />\n          )}\n        </Icon>\n        <Description>{weather[0].description}</Description>\n      </Container>\n      <Container>\n        <Icon>\n          <FontAwesomeIcon icon=\"wind\" />\n        </Icon>\n        <Description>\n          {wind.description} ({wind.speed} m/s)\n        </Description>\n      </Container>\n      <Container>\n        <Icon>\n          <FontAwesomeIcon icon=\"tint\" />\n        </Icon>\n        <Description>{humidity}%</Description>\n      </Container>\n    </Card>\n  );\n};\n\nexport default WeatherCard;\n","import React, { Component } from \"react\";\nimport { openWeatherMapAPI, timezoneDBAPI } from \"../../lib\";\n\nimport ErrorComponent from \"../../components/ErrorComponent\";\nimport Loading from \"../../components/Loading\";\nimport WeatherCard from \"../../components/WeatherCard\";\nimport addLeadingZeros from \"../../lib/utils/addLeadingZeros\";\n\nclass WeatherView extends Component {\n  state = {\n    city: undefined,\n    localTime: undefined,\n    timeOfDay: \"\",\n    error: false\n  };\n\n  componentDidMount() {\n    const { id } = this.props.match.params;\n    openWeatherMapAPI\n      .getCurrentWeatherByCityId(id)\n      .then(city => {\n        this.setState({ city });\n        return timezoneDBAPI.getTimezoneByLocation({ ...city.coord }, 1);\n      })\n      .then(localTime =>\n        this.setState({\n          localTime: `${addLeadingZeros(localTime.hours)}:${addLeadingZeros(\n            localTime.minutes\n          )}`,\n          timeOfDay: localTime.timeOfDay\n        })\n      )\n      .catch(error => this.setState({ error }));\n  }\n\n  renderError = () => <ErrorComponent />;\n\n  renderLoading = () => <Loading />;\n\n  render() {\n    const { city, localTime, error } = this.state;\n\n    if (error !== false) {\n      return this.renderError();\n    }\n\n    if (city === undefined || localTime === undefined) {\n      return this.renderLoading();\n    }\n\n    return (\n      <WeatherCard\n        name={city.name}\n        flag={city.flag}\n        temperature={city.temperature}\n        wind={city.wind}\n        weather={city.weather}\n        humidity={city.humidity}\n        localTime={localTime}\n        timeOfDay={this.state.timeOfDay}\n      />\n    );\n  }\n}\n\nexport default WeatherView;\n","import React, { Fragment } from \"react\";\nimport { Route, BrowserRouter as Router } from \"react-router-dom\";\nimport {\n  faBolt,\n  faCloud,\n  faCloudMoon,\n  faCloudMoonRain,\n  faCloudRain,\n  faCloudShowersHeavy,\n  faCloudSun,\n  faCloudSunRain,\n  faIcicles,\n  faMoon,\n  faSnowflake,\n  faSun,\n  faTint,\n  faWater,\n  faWind\n} from \"@fortawesome/free-solid-svg-icons\";\n\nimport ListView from \"./views/ListView\";\nimport SearchView from \"./views/SearchView\";\nimport WeatherView from \"./views/WeatherView\";\nimport { createGlobalStyle } from \"styled-components\";\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\n\nlibrary.add(\n  faBolt,\n  faCloud,\n  faCloudMoon,\n  faCloudMoonRain,\n  faCloudRain,\n  faCloudShowersHeavy,\n  faCloudSun,\n  faCloudSunRain,\n  faIcicles,\n  faMoon,\n  faSnowflake,\n  faSun,\n  faWater,\n  faWind,\n  faTint\n);\n\nconst GlobalStyles = createGlobalStyle`\n  body {\n     @import url('https://fonts.googleapis.com/css?family=Roboto:400,700');\n    font-family: 'Roboto', sans-serif;\n    margin: 0;\n    height: 100vh;\n    background-color: #ffffff;\n  }\n\n  #root {\n    width: 100%;\n    height: 100%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    overflow: hidden;\n    margin: 0;\n  }\n`;\n\nconst App = () => {\n  return (\n    <Fragment>\n      <GlobalStyles />\n      <Router basename={process.env.PUBLIC_URL}>\n        <Fragment>\n          <Route exact path=\"/\" component={SearchView} />\n          <Route path=\"/search/\" component={ListView} />\n          <Route path=\"/weather/:id\" component={WeatherView} />\n        </Fragment>\n      </Router>\n    </Fragment>\n  );\n};\n\nexport default App;\n","import * as serviceWorker from \"./serviceWorker\";\n\nimport App from \"./App\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}